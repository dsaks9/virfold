version: '3.8'

services:
  data_analyst_api:
    container_name: data-analyst-api
    build:
      context: ./app
      dockerfile: Dockerfile
    volumes:
      - ../../agents:/app/cache/agents:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PYTHONPATH=/app:/app/cache
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "8000:8000"
    depends_on:
      timeseriesdb:
        condition: service_healthy
      code_execution:
        condition: service_started
    networks:
      - app-network

  code_execution:
    container_name: code-runner-dev
    build:
      context: ../base/code_execution
      dockerfile: Dockerfile
    environment:
      - PYTHONPATH=/app/cache
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      timeseriesdb:
        condition: service_healthy
    networks:
      - app-network

  timeseriesdb:
    container_name: timeseriesdb
    build:
      context: ../base/ts_database
      dockerfile: Dockerfile
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  timescale_data:
    driver: local

networks:
  app-network:
    driver: bridge